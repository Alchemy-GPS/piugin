<?php/** * Achpay函数 */if (!defined('IN_DISCUZ')) {	exit('Access Denied');}//检查通知function achpay_checknotify($id = 0, $apikey = '', $timeout = 30) {	list($errno, $result) = achpay_post("https://pay.salepay.cn/pay/notifyVerified?apiKey={$apikey}&notifyId={$id}");	if ($errno) {		return false;	}	$result = json_decode($result, true);	if ($result['code'] == '0000' || !empty($result['success'])) {		return true;	}	return false;}//检查签名function achpay_checksign($config = array(), $signkey = '') {	if (empty($config['sign'])) {		return false;	}	ksort($config);	reset($config);	$signarg = '';	foreach ($config as $key => $value) {		if (!in_array($key, array('sign', 'signKey', 'signType'))) {			$signarg .= "{$key}={$value}&";		}	}	return $config['sign'] == md5(trim($signarg, '&') . $signkey);}//生成签名function achpay_parseparam($config = array(), $signkey = '') {	$config = achpay_iconv($config, CHARSET, 'UTF-8');	ksort($config);	reset($config);	$signarg = '';	foreach ($config as $key => $value) {		if (!in_array($key, array('sign', 'signKey', 'signType'))) {			$signarg .= "{$key}={$value}&";		}	}	$signarg = trim($signarg, '&') . $signkey;	$config['sign'] = md5($signarg);	return $config;}//curl 执行postfunction achpay_post($url, $post = array(), $timeout = 30) {	$errno = 0;		$result = salepay_NetCurlApi($url, $post);	//$result = dfsockopen($url, 0, $post, '', false, '', $timeout, true, 'URLENCODE', true, 0, array());	return array($errno, $result);}//curl post主方法function salepay_NetCurlApi($url, $postData) {		global $_G;	    $ch = curl_init();	    $http_type = ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') || (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https')) ? 'https://' : 'http://';		curl_setopt($ch, CURLOPT_REFERER, $http_type.$_SERVER['HTTP_HOST']);      curl_setopt($ch, CURLOPT_POST,true);     curl_setopt($ch,CURLOPT_URL,$url);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);     curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);     curl_setopt($ch,CURLOPT_HEADER,0);     curl_setopt($ch, CURLOPT_BINARYTRANSFER, true);     curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);     $output = curl_exec($ch);		    curl_close($ch);     return $output;				}//设置支付图标function achpay_iconv($string, $in_charset, $out_charset = CHARSET, $force_table = false) {	if (empty($string) || strtoupper($in_charset) == strtoupper($out_charset)) {		return $string;	}	if (is_array($string)) {		$data = array();		foreach ($string as $key => $value) {			$key = achpay_iconv($key, $in_charset, $out_charset, $force_table);			$data[$key] = achpay_iconv($value, $in_charset, $out_charset, $force_table);		}		return $data;	}	return diconv($string, $in_charset, $out_charset, $force_table);}function achpay_json($data, $status = 0) {	$inajax = getgpc('inajax');	if (!$inajax) {		showmessage($data, 'home.php?mod=spacecp&ac=plugin&op=credit&id=achpay:home');	}	$data = achpay_iconv($data, CHARSET, 'utf-8');	echo json_encode(array('code' => intval($status), 'data' => $data));	exit;}//添加支付function achpay_add($uid, $credittype, $creditnum, $price, $orderno,$payMethod) {	global $_G;	$cs['uid'] = addslashes($uid);	$cs['orderno'] = addslashes($orderno);	$cs['dateline'] = $_G['timestamp'];	$cs['credittype'] = addslashes($credittype);	$cs['creditnum'] = addslashes($creditnum);	$cs['price'] = addslashes($price);	$cs['payline'] = '0';	$cs['status'] = '0';	$cs['paymethod'] = $payMethod;	return DB::insert('achpay_log', $cs, true);}//编辑支付function achpay_edit($logid, $uid, $dateline, $credittype, $creditnum, $price, $payline, $status) {	global $_G;	$cs['uid'] = addslashes($uid);	$cs['dateline'] = addslashes($dateline);	$cs['credittype'] = addslashes($credittype);	$cs['creditnum'] = addslashes($creditnum);	$cs['price'] = addslashes($price);	$cs['payline'] = addslashes($payline);	$cs['status'] = addslashes($status);	$bs['logid'] = addslashes($logid);	return DB::update('achpay_log', $cs, $bs);}//删除支付function achpay_redel($uid) {	global $_G;	$bs['uid'] = addslashes($uid);		$bs['status'] = '0';	return DB::delete('achpay_log', $bs);}//计算总价function achpay_counttotal($startline,$endline,$uid) {	global $_G;	$startline = strtotime($startline);	$endline = strtotime($endline);	$uid = addslashes($uid);	$sqladd = " WHERE logid > '0' ";	$uid && $sqladd .= " AND uid = '" . $uid . "' ";	$startline && $sqladd .= " AND dateline >= '" . $startline . "' ";	$endline && $sqladd .= " AND dateline <= '" . $endline . "' ";	$query1 = DB::fetch_first("SELECT SUM(price) AS totalget FROM " . DB::table('achpay_log') . $sqladd." AND status='1'");		$query2 = DB::fetch_first("SELECT SUM(price) AS totalget FROM " . DB::table('achpay_log') . $sqladd." AND status='0'");	$query1['totalget'] = round($query1['totalget'],2);		$query2['totalget'] = round($query2['totalget'],2);		return array($query1['totalget'],$query2['totalget']);}//订单支付完成function achpay_finish($logid) {	global $_G;		$ps = $_G['cache']['plugin']['achpay'];	$order = achpay_get($logid);	$exlist = explode("\r\n",$ps['exlist']);    foreach($exlist as $e){	    $set = explode("|",$e);	    if($set[0]){		    if($order['creditnum']==$set[0]){				$order['creditnum'] = $order['creditnum'] + intval($set[1]);				$cs['creditnum'] = $order['creditnum'];			}	    }    }	$cs['payline'] = $_G['timestamp'];	$cs['status'] = '1';	$bs['logid'] = addslashes($logid);    $return = DB::update('achpay_log', $cs, $bs);    if (!empty($order) && $order['status'] != 1) {		$clog = lang('plugin/achpay', 'lang001');		updatemembercount($order['uid'], array($order['credittype'] => $order['creditnum']), true, '', 0, $clog, $clog, $clog);		notification_add($order['uid'], 'system', lang('plugin/achpay', 'lang074', array(			'ctitle'    => $_G['setting']['extcredits'][$order['credittype']]['title'],			'cmoney'    => $order['creditnum'],			'cunit'     => $_G['setting']['extcredits'][$order['credittype']]['unit'],			'order'     => $order['orderno'],			'total_fee' => $order['price']		)), array(), 1);	}	return $return;}//取消支付function achpay_cancel($logid) {	global $_G;	$cs['payline'] = $_G['timestamp'];	$cs['status'] = '-1';	$bs['logid'] = addslashes($logid);	return DB::update('achpay_log', $cs, $bs);}//设置为等待支付function achpay_wait($logid) {	global $_G;	$cs['payline'] = '0';	$cs['status'] = '0';	$bs['logid'] = addslashes($logid);	return DB::update('achpay_log', $cs, $bs);}//删除该订单function achpay_del($logid) {	global $_G;	$bs['logid'] = addslashes($logid);	return DB::delete('achpay_log', $bs);}function achpay_get($logid) {	return DB::fetch_first("SELECT * FROM %t WHERE logid=%d", array('achpay_log', $logid));}function achpay_getusername($uid) {	global $_G;	$uid = intval($uid);	$query = DB::fetch_first("SELECT username FROM " . DB::table('common_member') . " WHERE uid = '" . $uid . "'");	return $query['username'];}//订单总条数function achpay_getlistcount($uid, $startline, $endline) {	global $_G;	$uid = addslashes($uid);	$startline = strtotime($startline);	$endline = strtotime($endline);	$status = addslashes($status);	$sqladd = " WHERE logid > '0' ";	$uid && $sqladd .= " AND uid = '" . $uid . "' ";	$startline && $sqladd .= " AND dateline >= '" . $startline . "' ";	$endline && $sqladd .= " AND dateline <= '" . $endline . "' ";	($status != '') && $sqladd .= " AND status = '" . $status . "' ";	$query = DB::fetch_first("SELECT COUNT(*) AS num FROM " . DB::table('achpay_log') . $sqladd);	return $query['num'];}function achpay_getfrontlist($num = '10') {	$num = intval($num);	$query = DB::fetch_all("SELECT a.uid,a.payline,a.creditnum,b.username FROM " . DB::table('achpay_log')." a LEFT JOIN " . DB::table('common_member')." b ON a.uid = b.uid WHERE a.payline > '0' AND a.status='1' ORDER BY a.payline DESC LIMIT " . $num);    return $query;}function achpay_getlist($uid, $startline, $endline, $status, $startlimit = '0', $pagesize = '99999') {	global $_G;	$uid = addslashes($uid);	$startline = strtotime($startline);	$endline = strtotime($endline);	$status = addslashes($status);	$sqladd = " WHERE logid > '0' ";	$uid && $sqladd .= " AND uid = '" . $uid . "' ";	$startline && $sqladd .= " AND dateline >= '" . $startline . "' ";	$endline && $sqladd .= " AND dateline <= '" . $endline . "' ";	($status != '') && $sqladd .= " AND status = '" . $status . "' ";	$query = DB::fetch_all("SELECT * FROM " . DB::table('achpay_log') . $sqladd . " ORDER BY logid DESC LIMIT " . $startlimit . ", " . $pagesize);	return $query;}//	curl http post请求function achpay_http_post($url,$data){    if(!function_exists('curl_init')){        throw new Exception('php未安装curl组件',500);    }    $ch = curl_init();    curl_setopt($ch, CURLOPT_TIMEOUT, 3);    curl_setopt($ch,CURLOPT_URL, $url);    curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,FALSE);    curl_setopt($ch,CURLOPT_SSL_VERIFYHOST,FALSE);    curl_setopt($ch, CURLOPT_HEADER, FALSE);    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);    curl_setopt($ch, CURLOPT_POST, TRUE);    curl_setopt($ch, CURLOPT_HTTPHEADER, array(            'Content-Type: application/json; charset=utf-8'        )    );    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));    $response = curl_exec($ch);    curl_close($ch);    return $response;}/** * 制作签名 * @param $params array参数列表 * @param $keyfile string传入私钥文件路径 * @return sign */function achpay_get_sign($params,$keyfile){    if(empty($params)){        return;    }//	    对数组进行a-z排序    ksort($params);//        排序后的字符串    $str='';    foreach ($params as $v){        $str.=$v;    }    $encrypted = '';    $key = file_get_contents($keyfile);    $privKeyId = openssl_pkey_get_private($key);    openssl_sign($str, $encrypted, $privKeyId);    openssl_free_key($privKeyId);    return base64_encode($encrypted);}/** * 验证签名 * @param $res 接口传来的数组 * @param $keyfile string传入公钥文件路径 * */function achpay_check_sign($arr,$keyfile){//    $arr=object_to_array($res);    $cyrsign=$arr['sign'];    unset($arr['sign']);    $newArr=[];    foreach ($arr as $k=>$v){        if(is_array($v)){            $newArr[$k]=json_encode($v);        }else{            $newArr[$k]=$v;        }    }    ksort($newArr);//        var_dump($newArr);exit;    $str='';    foreach ($newArr as $v){        $str .= $v;    }    $pubKeyFile = file_get_contents($keyfile);    $publicKey = openssl_get_publickey($pubKeyFile);    $sign=base64_decode($cyrsign);    $result = openssl_verify($str,$sign,$publicKey);    openssl_free_key($publicKey);//        var_dump($result);exit;    return (bool)$result;}/** * 对象转数组 * @param $obj * @return array|void */function object_to_array($obj) {    $obj = (array)$obj;    foreach ($obj as $k => $v) {        if (gettype($v) == 'resource') {            return;        }        if (gettype($v) == 'object' || gettype($v) == 'array') {            $obj[$k] = (array)object_to_array($v);        }    }    return $obj;}